% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R, R/compute_sr_sparsity_loss.R
\name{compute_sr_sparsity_loss}
\alias{compute_sr_sparsity_loss}
\title{Compute Sharpe Ratio Loss due to Estimation and Selection Errors}
\usage{
compute_sr_sparsity_loss(
  mve_sr,
  mu,
  sigma,
  mu_hat,
  sigma_hat,
  max_card,
  greedy_perc = 1,
  do_checks = FALSE
)

compute_sr_sparsity_loss(
  mve_sr,
  mu,
  sigma,
  mu_hat,
  sigma_hat,
  max_card,
  greedy_perc = 1,
  do_checks = FALSE
)
}
\arguments{
\item{mve_sr}{A numeric scalar representing the population MVE Sharpe ratio.}

\item{mu}{Numeric vector; the population mean vector.}

\item{sigma}{Numeric matrix; the population covariance matrix.}

\item{mu_hat}{Numeric vector; the sample mean vector.}

\item{sigma_hat}{Numeric matrix; the sample covariance matrix.}

\item{max_card}{Positive integer; the maximum cardinality to consider (from 1 up to the number of assets in the sample).}

\item{greedy_perc}{Numeric; if less than 1, the fraction of combinations to evaluate for each cardinality;
if 1 or greater, all combinations are evaluated.}

\item{do_checks}{Logical flag indicating whether to perform input checks (default = FALSE).}
}
\value{
A scalar value corresponding to \eqn{\sqrt{\mu^T \Sigma^{-1}\mu}}.

A list with three elements:
sr_loss: Loss between the population MVE Sharpe ratio and the sample portfolio Sharpe ratio.
sr_loss_selection: Loss between the population MVE Sharpe ratio and the population Sharpe ratio computed using the sample selection.
sr_loss_estimation: Difference between the two computed population Sharpe ratios.
}
\description{
This function takes as input a population MVE Sharpe ratio (mve_sr),
the population parameters (mu and sigma) and corresponding sample parameters
(mu_sample and sigma_sample), together with a maximum cardinality (max_card)
and a greedy percentage (greedy_perc). It computes the sample sparse MVE portfolio,
then uses it to compute two versions of the population Sharpe ratio (one computed on the
full population using the sample selection and one computed on the sample).
Finally, it returns a list containing:
sr_loss: The loss between the population MVE Sharpe ratio and the sample portfolio SR.
sr_loss_selection: The loss between the population MVE SR and the population SR computed using the sample selection.
sr_loss_estimation: The difference between the two computed population SRs.

This function takes as input a population MVE Sharpe ratio (\eqn{mve\_sr}),
the population parameters (\code{mu} and \code{sigma}) and the corresponding sample parameters
(\code{mu_hat} and \code{sigma_hat}), together with a maximum cardinality (\code{max_card})
and a greedy percentage (\code{greedy_perc}). It computes the sample sparse MVE portfolio,
then uses it to compute two versions of the population Sharpe ratio: one computed over the full
population using the sample selection and one computed on the sample.
Finally, it returns a list containing:
sr_loss: The loss between the population MVE Sharpe ratio and the sample portfolio SR.
sr_loss_selection: The loss between the population MVE SR and the population SR computed using the sample selection.
sr_loss_estimation: The difference between the two computed population SRs.
}
\details{
When \code{do_checks} is TRUE, the wrapper performs input validation to ensure:
\itemize{
\item Population parameters \code{mu} and \code{sigma} are non-empty, numeric, and that \code{sigma} is square with dimensions matching \code{mu}.
\item Sample parameters \code{mu_hat} and \code{sigma_hat} are non-empty, numeric, and that \code{sigma_hat} is square with dimensions matching \code{mu_hat}.
\item \code{max_card} is a positive integer no larger than \code{length(mu_hat)}.
\item \code{greedy_perc} is nonnegative.
\item \code{mve_sr} is a finite number.
}
}
\examples{
# Example with three assets:
mu <- c(0.1, 0.2, 0.15)
sigma <- diag(3)
mu_hat <- c(0.12, 0.18, 0.16)
sigma_hat <- diag(3) * 1.1
mve_sr <- 0.8  # Example population MVE Sharpe ratio
max_card <- 2
result <- compute_sr_sparsity_loss(mve_sr,
                                   mu,
                                   sigma,
                                   mu_hat,
                                   sigma_hat,
                                   max_card,
                                   greedy_perc = 1.0,
                                   do_checks = TRUE)
print(result)
}
