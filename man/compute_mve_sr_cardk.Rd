% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compute_mve_sr_cardk.R
\name{compute_mve_sr_cardk}
\alias{compute_mve_sr_cardk}
\title{Compute Mean-Variance Efficient Sharpe Ratio with Cardinality K}
\usage{
compute_mve_sr_cardk(
  mu,
  sigma,
  max_card,
  max_comb = 0,
  gamma = 1,
  do_checks = FALSE
)
}
\arguments{
\item{mu}{Mean vector.}

\item{sigma}{Coveriance matrix.}

\item{max_card}{Maximum investment cardinality (from 1 up to the number of assets).}

\item{max_comb}{Maximum number of combinations to consider. If 0 (default),
all combinations are computed.}

\item{gamma}{Risk aversion parameter. Default is 1.}

\item{do_checks}{Logical flag indicating whether to perform input checks (default = \code{FALSE}).}
}
\value{
A list with \code{sr} (the optimal Sharpe ratio), \code{mve_weights}
(the optimal weights) and \code{selection} (the optimal asset selection).
}
\description{
This function takes as inputs the mean vector \code{mu}, the covariance matrix \code{sigma},
the maximum active portfolio cardinality \code{max_card},
the maximum number of combinations per cardinality to evaluate \code{max_comb},
and the risk-aversion parameter \eqn{\gamma}.
With these inputs, it searches over all combinations of assets with cardinality from 1 up to \code{max_card}
and computes the Sharpe ratio defined as
\eqn{\mu^T \, \sigma^{-1}\, \mu},
and computes the mean-variance efficient weights
It returns the highest Sharpe ratio found along with the associated asset selection.
\deqn{w = \frac{1}{\gamma}\, \text{sigma}^{-1}\, \text{first\_moment}},
over the selected assets.
It returns the highest Sharpe ratio found along with the associated weights and asset selection.
}
\examples{
# Consider a portfolio with 4 assets
mu <- c(0.1, 0.2, 0.15, 0.12)
sigma <- matrix(c(0.01, 0.002, 0.001, 0.0005,
                  0.002, 0.02, 0.0015, 0.001,
                  0.001, 0.0015, 0.015, 0.0007,
                  0.0005, 0.001, 0.0007, 0.012), nrow = 4, byrow = TRUE)
result <- compute_mve_sr_cardk(mu = mu,
                               sigma = sigma,
                               max_card = 2,
                               do_checks = TRUE)
}
