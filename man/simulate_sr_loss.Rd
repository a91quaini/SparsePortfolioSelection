% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R, R/utils.R
\name{simulate_sr_loss}
\alias{simulate_sr_loss}
\title{Simulate Sharpe Ratio Loss}
\usage{
simulate_sr_loss(
  mve_sr,
  mu,
  sigma,
  n_obs,
  max_card,
  greedy_perc = 1,
  do_checks = FALSE
)

simulate_sr_loss(
  mve_sr,
  mu,
  sigma,
  n_obs,
  max_card,
  greedy_perc = 1,
  do_checks = FALSE
)
}
\arguments{
\item{mve_sr}{A numeric scalar representing the population MVE Sharpe ratio.}

\item{mu}{Numeric vector; the population mean vector.}

\item{sigma}{Numeric matrix; the population covariance matrix.}

\item{n_obs}{Integer; the sample size to simulate.}

\item{max_card}{Positive integer; the maximum cardinality to consider.}

\item{greedy_perc}{Numeric scalar (default 1.0) indicating the fraction of combinations to evaluate.}

\item{do_checks}{Logical; if TRUE, performs input validation (default = FALSE).}
}
\value{
An Rcpp::List containing the Sharpe ratio loss measures.

A list containing the Sharpe ratio loss measures as computed by the Rcpp function.
}
\description{
This function simulates a sample of size \code{n_obs} from a multivariate normal
distribution with mean vector \code{mu} and covariance matrix \code{sigma}.
It computes the sample mean vector (\code{mu_sample}) and the sample covariance matrix (\code{sigma_sample}),
then calls \code{compute_sr_sparsity_loss} with the population and sample parameters,
the maximum cardinality (\code{max_card}), and the greedy percentage (\code{greedy_perc}).

This function serves as a wrapper that simulates a sample of returns from a multivariate normal
distribution with population mean vector \code{mu} and covariance matrix \code{sigma} (sample size \code{n_obs}),
then computes the sample mean vector and sample covariance matrix internally using a C++ implementation.
It then calls the Rcpp function \code{simulate_sr_loss_rcpp} (which uses the population parameters, the sample
estimates, a maximum cardinality (\code{max_card}), and a greedy percentage (\code{greedy_perc}))
to compute the Sharpe ratio loss.
}
\details{
When \code{do_checks} is TRUE, input validation is performed to ensure that:
\code{mu} is a non-empty numeric vector; \code{sigma} is a non-empty numeric square matrix with dimensions matching \code{mu};
\code{n_obs} is a positive integer; \code{max_card} is a positive integer no larger than the length of \code{mu};
\code{greedy_perc} is nonnegative; and \code{mve_sr} is a finite numeric scalar.
}
\examples{
\dontrun{
  # Example with three assets:
  mu <- c(0.1, 0.2, 0.15)
  sigma <- diag(3)
  mve_sr <- 0.8
  n_obs <- 100
  max_card <- 2
  result <- simulate_sr_loss(mve_sr,
                             mu,
                             sigma,
                             n_obs,
                             max_card,
                             greedy_perc = 1.0,
                             do_checks = TRUE)
  print(result)
}

}
