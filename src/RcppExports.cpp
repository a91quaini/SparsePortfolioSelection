// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// compute_sr_cpp
double compute_sr_cpp(const arma::vec& weights, const arma::vec& mu, const arma::mat& sigma, const bool do_checks);
RcppExport SEXP _SparsePortfolioSelection_compute_sr_cpp(SEXP weightsSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP do_checksSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const bool >::type do_checks(do_checksSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_sr_cpp(weights, mu, sigma, do_checks));
    return rcpp_result_gen;
END_RCPP
}
// compute_mve_sr_cpp
double compute_mve_sr_cpp(const arma::vec& mu, const arma::mat& sigma, const arma::uvec& selection, const bool do_checks);
RcppExport SEXP _SparsePortfolioSelection_compute_mve_sr_cpp(SEXP muSEXP, SEXP sigmaSEXP, SEXP selectionSEXP, SEXP do_checksSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type selection(selectionSEXP);
    Rcpp::traits::input_parameter< const bool >::type do_checks(do_checksSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_mve_sr_cpp(mu, sigma, selection, do_checks));
    return rcpp_result_gen;
END_RCPP
}
// compute_mve_weights_cpp
arma::vec compute_mve_weights_cpp(const arma::vec& mu, const arma::mat& second_moment, const arma::uvec& selection, const double gamma, const bool do_checks);
RcppExport SEXP _SparsePortfolioSelection_compute_mve_weights_cpp(SEXP muSEXP, SEXP second_momentSEXP, SEXP selectionSEXP, SEXP gammaSEXP, SEXP do_checksSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type second_moment(second_momentSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type selection(selectionSEXP);
    Rcpp::traits::input_parameter< const double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const bool >::type do_checks(do_checksSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_mve_weights_cpp(mu, second_moment, selection, gamma, do_checks));
    return rcpp_result_gen;
END_RCPP
}
// compute_mve_sr_cardk_cpp
Rcpp::List compute_mve_sr_cardk_cpp(const arma::vec& mu, const arma::mat& sigma, const unsigned int max_card, const unsigned int max_comb, const bool do_checks);
RcppExport SEXP _SparsePortfolioSelection_compute_mve_sr_cardk_cpp(SEXP muSEXP, SEXP sigmaSEXP, SEXP max_cardSEXP, SEXP max_combSEXP, SEXP do_checksSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type max_card(max_cardSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type max_comb(max_combSEXP);
    Rcpp::traits::input_parameter< const bool >::type do_checks(do_checksSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_mve_sr_cardk_cpp(mu, sigma, max_card, max_comb, do_checks));
    return rcpp_result_gen;
END_RCPP
}
// simulate_mve_sr_cpp
Rcpp::List simulate_mve_sr_cpp(const arma::vec& mu, const arma::mat& sigma, const unsigned int n_obs, const unsigned int max_card, const unsigned int max_comb, const bool do_checks);
RcppExport SEXP _SparsePortfolioSelection_simulate_mve_sr_cpp(SEXP muSEXP, SEXP sigmaSEXP, SEXP n_obsSEXP, SEXP max_cardSEXP, SEXP max_combSEXP, SEXP do_checksSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type n_obs(n_obsSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type max_card(max_cardSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type max_comb(max_combSEXP);
    Rcpp::traits::input_parameter< const bool >::type do_checks(do_checksSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_mve_sr_cpp(mu, sigma, n_obs, max_card, max_comb, do_checks));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SparsePortfolioSelection_compute_sr_cpp", (DL_FUNC) &_SparsePortfolioSelection_compute_sr_cpp, 4},
    {"_SparsePortfolioSelection_compute_mve_sr_cpp", (DL_FUNC) &_SparsePortfolioSelection_compute_mve_sr_cpp, 4},
    {"_SparsePortfolioSelection_compute_mve_weights_cpp", (DL_FUNC) &_SparsePortfolioSelection_compute_mve_weights_cpp, 5},
    {"_SparsePortfolioSelection_compute_mve_sr_cardk_cpp", (DL_FUNC) &_SparsePortfolioSelection_compute_mve_sr_cardk_cpp, 5},
    {"_SparsePortfolioSelection_simulate_mve_sr_cpp", (DL_FUNC) &_SparsePortfolioSelection_simulate_mve_sr_cpp, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_SparsePortfolioSelection(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
